#! /bin/bash

# Functions
function _download_file() {
	local file url headers
	local header
	local try_download_command
	local args

	file="$1"
	url="$2"
	shift 2
	headers=("$@")

	if [ -z "${_download_command}" ]; then
		for try_download_command in curl wget; do
			if command -v "${try_download_command}" 2>/dev/null >/dev/null; then
				_download_command="${try_download_command}"

				break
			fi
		done
	fi

	args=()
	for header in "${headers[@]}"; do
		case "${_download_command}" in
			curl)
				args+=(--header "${header}")
				;;
			wget)
				args+=(--header="${header}")
				;;
		esac
	done

	case "${_download_command}" in
		curl)
			curl "${args[@]}" --silent --show-error --location --output "${file}" "${url}" || return 1
			;;
		wget)
			wget "${args[@]}" --output-document="${file}" "${url}" || return 1
			;;
	esac

	return 0
}

function download () {
	local url
	local file
	local checksum dl_checksum checksum_type
	local tmpfile

	url="$1"
	file="$2"
	checksum="$3"

	if [ -n "${BUILD_CC_DOWNLOAD_HELPER}" ]; then
		"${BUILD_CC_DOWNLOAD_HELPER}" "${url}" "${file}" "${checksum}"

		return "$?"
	fi

	checksum_type='unknown'
	if [ -n "${checksum}" ]; then
		case "${checksum}" in
			????????????????????????????????????????)
				checksum_type='sha1'
				;;
			????????????????????????????????????????????????????????????????)
				checksum_type='sha256'
				;;
			*)
				;;
		esac
	fi

	tmpfile="${file}.tmp"

	if [ -s "${file}" ]; then
		return 0
	fi

	mkdir -p "$(dirname "${tmpfile}")" 2>/dev/null >/dev/null

	rm -f "${tmpfile}"
	if [ "${checksum_type}" != 'unknown' ]; then
		_download_file "${tmpfile}" "http://hashcache.rkeene.org/${checksum_type}/${checksum}" "X-Cache-URL: ${url}" || rm -f "${tmpfile}"
	fi
	if [ ! -s "${tmpfile}" ]; then
		_download_file "${tmpfile}" "${url}"
	fi

	case "${checksum_type}" in
		sha1)
			dl_checksum="$(openssl dgst -sha1 "${tmpfile}" 2>/dev/null | sed 's@.*= *@@')"
			;;
		sha256)
			dl_checksum="$(openssl dgst -sha256 "${tmpfile}" 2>/dev/null | sed 's@.*= *@@')"
			;;
	esac

	if [ "${checksum_type}" != 'unknown' ]; then
		if [ "${checksum}" != "${dl_checksum}" ]; then
			echo "Checksum mismatch.  Got checksum: ${dl_checksum}; Expected checksum: ${checksum}" >&2

			return 1
		fi
	fi

	mv "${tmpfile}" "${file}"

	return 0
}

function fix_pkgconfig_file () {
	local file

	file="$1"

	sed 's@^prefix=.*@prefix=/usr@;s@\$(libdir)@${libdir}@g' "${file}" > "${file}.new"
	chmod u+w "${file}"
	cat "${file}.new" > "${file}"
	rm -f "${file}.new"

	return 0
}

# Expects:
#    CC
#    CCNAME
#    PREFIX
function multilib () {
	local arch
	local mode
	local archs host libdir cflags
	local addprefix

	mode='cflags'

	if [ "$1" = '--libdir' ]; then
		mode='libdir'

		shift
	fi

	if [ "$1" = '--host' ]; then
		mode='host'

		shift
	fi

	if [ "$1" = '--cflags' ]; then
		mode='cflags'

		shift
	fi

	addprefix='1'
	if [ "$1" = '--noprefix' ]; then
		addprefix='0'

		shift
	fi

	arch="$1"

	# If no architecture is given, return the list of architectures
	if [ -z "${arch}" ]; then
		mode='list'
	else
		cflags=""
		if [ "${arch}" != '_' ]; then
			cflags="${arch}"
		fi
	fi

	case "${mode}" in
		list)
			archs="$(${CC} -print-multi-lib | grep -v '^[^;]*/' | sed 's/^.*;//;s/^@/-/;s@^ *$@_@')"
			if [ -z "${archs}" ]; then
				archs='_'
			fi

			echo "${archs}"

			return 0
			;;
		cflags)
			echo "${cflags}"

			return 0
			;;
		libdir)
			libdir="${PREFIX}/lib"
			mkdir -p "${libdir}" || exit 1

			libdir="${libdir}/$(${CC} ${cflags} -print-multi-os-directory)"
			mkdir -p "${libdir}" || exit 1

			libdir="$(cd "${libdir}" && pwd)" || exit 1

			if [ "${addprefix}" = '0' ]; then
				libdir="$(echo "${libdir}" | sed 's@^'"${PREFIX}"'/@/@')"
			fi

			echo "${libdir}"

			return 0
			;;
		host)
			if [ "${arch}" = '_' ]; then
				echo "${CCNAME}"
				return 0
			fi

			case "${arch}" in
				-m32)
					host="$(echo "${CCNAME}" | sed 's@^x86_64-@i486-@;s@^sparcv9-@sparc-@')"
					;;
				-m64)
					host="$(echo "${CCNAME}" | sed 's@^i.86-@x86_64-@;s@-x32-@-@;s@^x32-@x86_64-@;s@^sparc-@sparcv9-@')"
					;;
				*)
					host="${CCNAME}.${arch}"
					;;
			esac

			echo "${host}"

			return 0
			;;
	esac
}

# Determine Linux and uClibc arch name
## alpha arm avr32 bfin cris e1 frv h8300 hppa i386 i960 ia64 m68k microblaze mips nios nios2 powerpc sh sh64 sparc v850 vax x86_64
arch="$(echo "${CCNAME}" | cut -f 1 -d '-')"
case "${arch}" in
	arm*)
		arch=arm
		;;
	mips*)
		arch=mips
		;;
	hppa*)
		arch=hppa
		;;
	sparc*)
		arch=sparc
		;;
	i?86)
		arch=i386
		;;
esac
